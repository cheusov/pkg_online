#!/bin/sh

set -e

############################################################
if test -z "$PKGSRCDIR"; then
    PKGSRCDIR=/usr/pkgsrc
fi

if test -z "$MAKE"; then
    MAKE=make
fi

############################################################
cd $PKGSRCDIR

tmpfn=/tmp/pkgdirs2info.$$
trap 'rm -f $tmpfn' 0 1 2 15

############################################################
capitalize (){
    echo $1 | awk '{print toupper(substr($0, 1, 1)) substr($0, 2)}'
}

summary_data2info (){
    awk '
    $1 == "prefix" {
	next
    }

    function normalize (w){
	return toupper(w)
#	return toupper(substr(w, 1, 1)) substr(w, 2)
    }

    $1 == "descr" {
	print "\n" normalize("descr:")
	fn = $3
	while (0 < ret = (getline < fn)){
	    print "  " $0
	}
	if (ret < 0){
	    printf "reading from `" fn "` failed\n" > "/dev/stderr"
	    exit 1
	}
	print ""
	next
    }

    {
	$2 = ""
	$1 = (normalize($1) ":")
	if ($3 != ""){
	    while(length($1) < 15){
		$1 = ($1 " ")
	    }
	}

	print $0
    }'
}

cd_and_print_summary_data (){
    ( cd $1 && ${MAKE} print-summary-data; ) > "$tmpfn";
}

generate_info (){
    # general information
    if cd_and_print_summary_data $1 > "$tmpfn"; then
	echo '------------------------------'
	pkgname=`awk '$1 == "index" {sub(/-[^-]*$/, "", $3); print $3}' "$tmpfn"`
	pkgpath=`awk '$1 == "index" {print $2}' "$tmpfn"`
	echo "PKGNAME:         $pkgname"
	echo "PKGPATH:         $pkgpath"
	cat "$tmpfn" | summary_data2info

    # plist
	capitalize "PLIST:"
	plist_fn=$1/PLIST
	if test -f $plist_fn; then
	    awk '/^[^@]/ {print "  " $0}' $plist_fn
	else
	    echo ''
	fi
    else
	printf "Bad package $1, skipped\n" 1>&2
    fi
}

############################################################
for i; do
    generate_info "$i"
    echo ''
done
