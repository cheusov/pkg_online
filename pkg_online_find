#!/bin/sh

# Copyright (c) 2007-2008 Aleksey Cheusov <vle@gmx.net>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -e

. pkg_online_client.env
. pipestatus

export LC_ALL=C 

# temp dir
tmp_dir="/tmp/pkg_online_find.$$"
trap "rm -rf $tmp_dir" 0 1 2 3 15
mkdir -m 700 "$tmp_dir"

#
usage (){
    echo 'usage: pkg_online_find query1 [query2...]' 1>&2
}

if test $# -lt 1; then
    usage
    exit 1
fi

#
mmmm (){
    # args: $1 - count
    awk '$1 == '"$1"' {print $2}'
}

#
intersect (){
    # args: $1 - count
    runpipe0 sort $tmp_dir/*.txt '|' uniq -c '|' mmmm "$1" > "$result_fn"
}

# search images...
cnt=0
for q in "$@"; do
    field=`echo $q | cut -d: -f1`
    strat=`echo $q | cut -d: -f2`
    query=`echo $q | cut -d: -f3`

    # short names for strategies
    if test -z "$strat"; then
	strat=empty
    fi

    synonym="pkg_online_strat__$strat"
    if eval test "\$$synonym"; then
	eval strat=\$$synonym
    fi

    # short names for fields
    if test -z "$field"; then
	field=empty
    fi

    synonym="pkg_online_field__$field"
    if eval test "\$$synonym"; then
	eval field=\$$synonym
    fi

    #
    res_fn=$tmp_dir/$cnt.txt

    $PKG_ONLINE_CLIENT "$field:$strat:$query" > $res_fn

    cnt=$(($cnt+1))
done

result_fn="$tmp_dir"/result
intersect "$cnt" > "$result_fn"

print_pkgname_and_onelineinfo () {
    awk -v result_fn="$result_fn" -F'\t' '
    $0 ~ /^[0-9]/ && NF != 4 {
        skip = 0
        next
    }
    NF == 4 && !skip {
        getline onelineinfo
        getline pkgname < result_fn
        printf "%20s - %s\n", pkgname, onelineinfo
        skip = 1
        fflush()
    }'
}

decorate_pkgnames1 (){
    # slow! needs CVS version of 'dict' program
    # To make this fast, 'dict' should be rewritten
    # with select(2) or fork(2)

    runpipe0 dict -F -f -h "$PKG_ONLINE_SERVER" -p "$PKG_ONLINE_PORT" \
	-d pkgsrc-${PKG_SUMMARY_TYPE}-pkgname2onelineinfo "$@" '|' \
    print_pkgname_and_onelineinfo
}

decorate_pkgnames2 (){
    # slow! See decorate_pkgnames1
    for q in "$@"; do 
	dict -f -h "$PKG_ONLINE_SERVER" -p "$PKG_ONLINE_PORT" \
	    -d pkgsrc-${PKG_SUMMARY_TYPE}-pkgname2onelineinfo "$q"
    done | print_pkgname_and_onelineinfo
}

quick_hack_client (){
    awk '
BEGIN {
   in_def = 0
}

BEGIN {
   hostname = "hostname"
   port     = "port"
}

{
   sub(/\r$/, "")
}

$1 == 150 {
   print $2, "definitions found"
   next
}

$1 == 220 || $1 == 250 {
   next
}

in_def && $1 == "." {
   in_def = 0
   next
}

in_def == 1 {
   print "  " $0
   next
}

$1 == 151 {
   in_def = 1
   printf "%s\t%s\taaa\tbbb\n", hostname, port
   next
}

$1 == 221 {
   exit 0
}
'"$@"
}

generate_rfc2229_query (){
    for db in "$@"; do
	printf "define pkgsrc-%s-pkgname2onelineinfo %s\r\n" "${PKG_SUMMARY_TYPE}" "$db"
    done
    printf 'quit\r\n';
}

decorate_pkgnames3 (){
    runpipe0 \
	generate_rfc2229_query "$@" '|' \
	${PKG_ONLINE_NETCAT} "$PKG_ONLINE_SERVER" "$PKG_ONLINE_PORT" '|' \
	quick_hack_client '|' \
	print_pkgname_and_onelineinfo
}

if test -s "$result_fn"; then
#    cat $result_fn
    decorate_pkgnames3 `cat $result_fn`
else
    echo "No matches found" 1>&2
    exit 20
fi
