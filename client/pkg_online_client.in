#!/bin/sh

# Copyright (c) 2007-2011 Aleksey Cheusov <vle@gmx.net>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

. pkg_online_client.env
. pipestatus

set -e

export LC_ALL=C

usage () {
cat <<EOF
usage: pkg_online_client -h
       pkg_online_client -f
       pkg_online_client -s
       pkg_online_client [-n] fsq1 [fsq2 ...]
       pkg_online_client -1|-3|-9|-i [-r] [-q] pkgpair1 [pkgpair2...]
where pkgpair is <PKGPATH>,<PKGNAME>
and fsq is <field>:<strategy>:<query>
OPTIONS:
   -h         display this screen
   -s         display available search strategies
   -f         display available fields for search in
   -1         display 1-line information about packages (by PKGPAIR)
   -3         display short information about packages (by PKGPAIR)
   -9|-i      display full information about packages (by PKGPAIR)
   -r         raw output in pkg_summary(5) format
   -q         quiet mode, do not print "No matches found" to stderr
   -n <limit>    maximum number of results
EOF
}

if test $# -eq 0; then
    usage
    exit 2
fi

limit=1000000000

while getopts hsf139irqn: f; do
    case "$f" in
        s)    strats=1;;
        f)    dbs=1;;
        9|i)  info=1;;
        3)    shortinfo=1;;
        1)    onelineinfo=1;;
        r)    raw_format=1;;
        q)    quiet_mode=1;;
	n)    limit=$OPTARG;;
        h)    usage; exit 0;;
	?)    printf "Run pkg_online_client -h for details\n"; exit 2;;
    esac
done

shift `expr $OPTIND - 1`

on_exit (){
    rm -rf $tmp_dir
}

# temp dir and files
tmp_dir=`mktemp -d /tmp/pkg_online.XXXXXX`
. @psu_libexecdir@/sig_handler.sh

res_fn=$tmp_dir/result.txt
log_fn=$tmp_dir/errors.log
ok_fn=$tmp_dir/ok

#
extract_strat (){
    awk -F'\t' '{printf "%15s    %s\n", $3, $4}'
}

extract_fields (){
    awk -F'\t' -v type="$PKG_SUMMARY_TYPE" '
	$3 ~ ("^pkgsrc-" type "-index") {
	    sub(/^.*-/, "", $3)
	    print $3
	}'
}

extract_pkgpair (){
    awk -v limit="$limit" -F'\t' \
	'$4 ~ /^00-?database/ {next}
	NF == 4 {print $4; ++cnt; if (cnt == limit) exit 0}' "$@"
}

run_query__fsq (){
    field="`echo $1 | cut -d: -f1`"
    strat="`echo $1 | cut -d: -f2`"
    query="`echo $1 | cut -d: -f3`"

    if test _ = _"$field" -a _ = _"$strat" -a _ = _"$query"; then
	printf 'query format: <field:strategy:query>\n'
	exit 2
    fi

    dbname="pkgsrc-${PKG_SUMMARY_TYPE}-index-${field}"

    set +e
    $PKG_ONLINE_DICT -h "$PKG_ONLINE_SERVER" -p "$PKG_ONLINE_PORT" \
	    -m -f -d "$dbname" -s "$strat" -- "$query" 2> "$log_fn"
    ret=$?
    set -e
    case $ret in
	20)
	    ;;
	0|21)
	    echo '' > "$ok_fn";;
	*)
	    cat "$log_fn" 1>&2
	    return $ret;;
    esac
}

run_query_all (){
    for i in "$@"; do
	if printf '%s\n' "$i" | grep '^[^:]*:[^:]*:[^:]*$' > /dev/null; then
	    run_query__fsq "$i" & #|| return $?
	else
	    echo "Incorrect search pattern '$i'" 1>&2
	    return 1
	fi
    done
    wait
}

run_query (){
    # $i: dbname:strategy:query
    runpipe0 run_query_all "$@" '|' extract_pkgpair '|' sort -u

    if test -f "$ok_fn"; then
	exit 0
    else
	if test -z "$quiet_mode"; then
	    cat "$log_fn" 1>&2
	fi
	exit 20
    fi
}

dict2pkg_summary (){
    sed -n 's,^  ,,p' "$@"
}

if test -n "$raw_format"; then
    decorate_info (){
	dict2pkg_summary "$@"
    }
else
    decorate_info (){
	dict2pkg_summary "$@" | pkg_summary4view
    }
fi

# -s
if test $strats; then
    runpipe0 $PKG_ONLINE_DICT \
	-h "$PKG_ONLINE_SERVER" -p "$PKG_ONLINE_PORT" -P - \
	-f -S '|' extract_strat

    exit 0
fi

# -f
if test $dbs; then
    runpipe0 $PKG_ONLINE_DICT \
	-h "$PKG_ONLINE_SERVER" -p "$PKG_ONLINE_PORT" -P - \
	-f -D '|' extract_fields

    exit 0
fi

# -1
print_pkgpair_and_onelineinfo () {
    awk -v pkgs_fn="$pkgs_fn" -F'\t' '
    $0 ~ /^[0-9]/ && NF == 1 {
        skip = 0
        next
    }

    NF == 4 && !skip {
        getline onelineinfo
        getline pkgpair < pkgs_fn
        idx = index(pkgpair, ",")
        pkgbase = substr(pkgpair, idx + 1)
        pkgpath = substr(pkgpair, 1, idx - 1)

        if (substr(pkgpair, idx - length(pkgbase), length(pkgbase)) == pkgbase)
            printf "%-25s - %s\n", pkgpath, onelineinfo
        else
            printf "%-25s - %s\n", pkgpath "(" pkgbase ")", onelineinfo
        skip = 1
        fflush()
    }
    ' "$@"
}

# hack dict client that DEFINEs quickly multiple queries

# server response parser
quick_hack_client (){
    awk -v quiet_mode="$quiet_mode" '
BEGIN {
   in_def = 0
}

BEGIN {
   hostname = "hostname"
   port     = "port"
}

{
   sub(/\r$/, "")
}

$1 == 150 {
   print $2, "definitions found"
   next
}

$1 == 220 || $1 == 250 {
   next
}

in_def && $1 == "." {
   in_def = 0
   next
}

in_def == 1 {
   print "  " $0
   next
}

$1 == 151 {
   in_def = 1
   printf "%s\t%s\taaa\tbbb\n", hostname, port
   next
}

$1 == 221 {
   exit 0
}

$1 == 552 {
   if (!quiet_mode)
      print "No matches found:", $0 > "/dev/stderr"

   exit 20
}

{
   print "unexpected server response: " $0 > "/dev/stderr"
   exit 30
}
'"$@"
}

# query generator
generate_rfc2229_query (){
    # $1 - dbname
    dbname=$1
    shift

    for db in "$@"; do
	printf "define %s %s\r\n" "$dbname" "$db"
    done
    printf 'quit\r\n';
}

# -i|-9 or -3
dbname=''
if test $info; then
    dbname=pkgsrc-${PKG_SUMMARY_TYPE}-info
elif test $shortinfo; then
    dbname=pkgsrc-${PKG_SUMMARY_TYPE}-shortinfo
fi

if test $dbname; then
    runpipe_base \
	generate_rfc2229_query "$dbname" "$@" '|' \
	${PKG_ONLINE_NETCAT} "$PKG_ONLINE_SERVER" "$PKG_ONLINE_PORT" '|' \
	quick_hack_client '|' \
	decorate_info

#    for future versions of 'dict' client
#
#    runpipe0 $PKG_ONLINE_DICT \
#	-h "$PKG_ONLINE_SERVER" -p "$PKG_ONLINE_PORT" -P - \
#	-f -d "$dbname" \
#	"$@" '|' \
#	decorate_info

    exit $pipestatus_3
fi

# -1
if test $onelineinfo; then
    pkgs_fn=$tmp_dir/pkgs
    for pkg in "$@"; do
	echo "$pkg" >> $pkgs_fn
    done

    runpipe_base \
	generate_rfc2229_query \
	pkgsrc-"$PKG_SUMMARY_TYPE"-onelineinfo "$@" '|' \
	${PKG_ONLINE_NETCAT} "$PKG_ONLINE_SERVER" "$PKG_ONLINE_PORT" '|' \
	quick_hack_client '|' \
	print_pkgpair_and_onelineinfo

#    for future versions of 'dict' client
#
#    runpipe0 $PKG_ONLINE_DICT -F \
#	-h "$PKG_ONLINE_SERVER" -p "$PKG_ONLINE_PORT" -P - \
#	-f -d pkgsrc-"$PKG_SUMMARY_TYPE"-shortinfo \
#	"$@" '|' \
#	print_pkgpair_and_onelineinfo

    exit $pipestatus_3
fi

# search queries
run_query "$@"
